--- ../src_base/minecraft_server/net/minecraft/src/BlockLeaves.java
+++ ../src/minecraft_server/net/minecraft/src/BlockLeaves.java
@@ -1,8 +1,11 @@
 package net.minecraft.src;
 
+import java.util.ArrayList;
 import java.util.Random;
 
-public class BlockLeaves extends BlockLeavesBase
+import soulforge.utils.IShearable;
+
+public class BlockLeaves extends BlockLeavesBase implements IShearable
 {
     public static final String[] LEAF_TYPES = new String[] {"oak", "spruce", "birch", "jungle"};
     public static final String[][] field_94396_b = new String[][] {{"leaves", "leaves_spruce", "leaves", "leaves_jungle"}, {"leaves_opaque", "leaves_spruce_opaque", "leaves_opaque", "leaves_jungle_opaque"}};
@@ -52,91 +55,93 @@
     {
         if (!par1World.isRemote)
         {
-            int var6 = par1World.getBlockMetadata(par2, par3, par4);
-
-            if ((var6 & 8) != 0 && (var6 & 4) == 0)
-            {
-                byte var7 = 4;
-                int var8 = var7 + 1;
-                byte var9 = 32;
-                int var10 = var9 * var9;
-                int var11 = var9 / 2;
+            int l = par1World.getBlockMetadata(par2, par3, par4);
+
+            if ((l & 8) != 0 && (l & 4) == 0)
+            {
+                byte b0 = 4;
+                int i1 = b0 + 1;
+                byte b1 = 32;
+                int j1 = b1 * b1;
+                int k1 = b1 / 2;
 
                 if (this.adjacentTreeBlocks == null)
                 {
-                    this.adjacentTreeBlocks = new int[var9 * var9 * var9];
-                }
-
-                int var12;
-
-                if (par1World.checkChunksExist(par2 - var8, par3 - var8, par4 - var8, par2 + var8, par3 + var8, par4 + var8))
-                {
-                    int var13;
-                    int var14;
-                    int var15;
-
-                    for (var12 = -var7; var12 <= var7; ++var12)
+                    this.adjacentTreeBlocks = new int[b1 * b1 * b1];
+                }
+
+                int l1;
+
+                if (par1World.checkChunksExist(par2 - i1, par3 - i1, par4 - i1, par2 + i1, par3 + i1, par4 + i1))
+                {
+                    int i2;
+                    int j2;
+                    int k2;
+
+                    for (l1 = -b0; l1 <= b0; ++l1)
                     {
-                        for (var13 = -var7; var13 <= var7; ++var13)
+                        for (i2 = -b0; i2 <= b0; ++i2)
                         {
-                            for (var14 = -var7; var14 <= var7; ++var14)
+                            for (j2 = -b0; j2 <= b0; ++j2)
                             {
-                                var15 = par1World.getBlockId(par2 + var12, par3 + var13, par4 + var14);
-
-                                if (var15 == Block.wood.blockID)
+                                k2 = par1World.getBlockId(par2 + l1, par3 + i2, par4 + j2);
+
+                                Block block = Block.blocksList[k2];
+
+                                if (block != null && block.canSustainLeaves(par1World, par2 + l1, par3 + i2, par4 + j2))
                                 {
-                                    this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = 0;
+                                    this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = 0;
                                 }
-                                else if (var15 == Block.leaves.blockID)
+                                else if (block != null && block.isLeaves(par1World, par2 + l1, par3 + i2, par4 + j2))
                                 {
-                                    this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -2;
+                                    this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = -2;
                                 }
                                 else
                                 {
-                                    this.adjacentTreeBlocks[(var12 + var11) * var10 + (var13 + var11) * var9 + var14 + var11] = -1;
+                                    this.adjacentTreeBlocks[(l1 + k1) * j1 + (i2 + k1) * b1 + j2 + k1] = -1;
                                 }
                             }
                         }
                     }
 
-                    for (var12 = 1; var12 <= 4; ++var12)
+                    for (l1 = 1; l1 <= 4; ++l1)
                     {
-                        for (var13 = -var7; var13 <= var7; ++var13)
+                        for (i2 = -b0; i2 <= b0; ++i2)
                         {
-                            for (var14 = -var7; var14 <= var7; ++var14)
+                            for (j2 = -b0; j2 <= b0; ++j2)
                             {
-                                for (var15 = -var7; var15 <= var7; ++var15)
+                                for (k2 = -b0; k2 <= b0; ++k2)
                                 {
-                                    if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11] == var12 - 1)
+                                    if (this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1] == l1 - 1)
                                     {
-                                        if (this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11 - 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-                                        }
-
-                                        if (this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11 + 1) * var10 + (var14 + var11) * var9 + var15 + var11] = var12;
-                                        }
-
-                                        if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 - 1) * var9 + var15 + var11] = var12;
-                                        }
-
-                                        if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11 + 1) * var9 + var15 + var11] = var12;
-                                        }
-
-                                        if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + (var15 + var11 - 1)] = var12;
-                                        }
-
-                                        if (this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] == -2)
-                                        {
-                                            this.adjacentTreeBlocks[(var13 + var11) * var10 + (var14 + var11) * var9 + var15 + var11 + 1] = var12;
+                                        if (this.adjacentTreeBlocks[(i2 + k1 - 1) * j1 + (j2 + k1) * b1 + k2 + k1] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1 - 1) * j1 + (j2 + k1) * b1 + k2 + k1] = l1;
+                                        }
+
+                                        if (this.adjacentTreeBlocks[(i2 + k1 + 1) * j1 + (j2 + k1) * b1 + k2 + k1] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1 + 1) * j1 + (j2 + k1) * b1 + k2 + k1] = l1;
+                                        }
+
+                                        if (this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 - 1) * b1 + k2 + k1] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 - 1) * b1 + k2 + k1] = l1;
+                                        }
+
+                                        if (this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 + 1) * b1 + k2 + k1] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1 + 1) * b1 + k2 + k1] = l1;
+                                        }
+
+                                        if (this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + (k2 + k1 - 1)] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + (k2 + k1 - 1)] = l1;
+                                        }
+
+                                        if (this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1 + 1] == -2)
+                                        {
+                                            this.adjacentTreeBlocks[(i2 + k1) * j1 + (j2 + k1) * b1 + k2 + k1 + 1] = l1;
                                         }
                                     }
                                 }
@@ -145,11 +150,11 @@
                     }
                 }
 
-                var12 = this.adjacentTreeBlocks[var11 * var10 + var11 * var9 + var11];
-
-                if (var12 >= 0)
-                {
-                    par1World.setBlockMetadata(par2, par3, par4, var6 & -9, 4);
+                l1 = this.adjacentTreeBlocks[k1 * j1 + k1 * b1 + k1];
+
+                if (l1 >= 0)
+                {
+                    par1World.setBlockMetadata(par2, par3, par4, l & -9, 4);
                 }
                 else
                 {
@@ -272,4 +277,24 @@
     {
         return new ItemStack(this.blockID, 1, par1 & 3);
     }
+    
+    @Override
+    public boolean isShearable(ItemStack item, World world, int x, int y, int z)
+    {
+        return true;
+    }
+
+    @Override
+    public ArrayList<ItemStack> onSheared(ItemStack item, World world, int x, int y, int z, int fortune)
+    {
+        ArrayList<ItemStack> ret = new ArrayList<ItemStack>();
+        ret.add(new ItemStack(this, 1, world.getBlockMetadata(x, y, z) & 3));
+        return ret;
+    }
+    
+    @Override
+    public boolean isLeaves(World world, int x, int y, int z)
+    {
+        return true;
+    }
 }
