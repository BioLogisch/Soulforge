--- ../src_base/minecraft/net/minecraft/src/SpawnerAnimals.java
+++ ../src/minecraft/net/minecraft/src/SpawnerAnimals.java
@@ -1,9 +1,12 @@
 package net.minecraft.src;
 
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
+
+import soulforge.utils.EventRegistry;
 
 public final class SpawnerAnimals
 {
@@ -29,79 +32,85 @@
      * adds all chunks within the spawn radius of the players to eligibleChunksForSpawning. pars: the world,
      * hostileCreatures, passiveCreatures. returns number of eligible chunks.
      */
-    public static final int findChunksForSpawning(WorldServer par0WorldServer, boolean par1, boolean par2, boolean par3)
-    {
-        if (!par1 && !par2)
+    public static final int findChunksForSpawning(WorldServer wolrdServer, boolean spawnHostileMobs, boolean spawnPeacefulMobs, boolean spawnAnimals)
+    {
+        if (!spawnHostileMobs && !spawnPeacefulMobs)
         {
             return 0;
         }
         else
         {
             eligibleChunksForSpawning.clear();
-            int var4;
-            int var5;
-
-            for (var4 = 0; var4 < par0WorldServer.playerEntities.size(); ++var4)
-            {
-                EntityPlayer var6 = (EntityPlayer)par0WorldServer.playerEntities.get(var4);
-                int var7 = MathHelper.floor_double(var6.posX / 16.0D);
-                var5 = MathHelper.floor_double(var6.posZ / 16.0D);
-                byte var8 = 8;
-
-                for (int var9 = -var8; var9 <= var8; ++var9)
+            int counter;
+
+            for (counter = 0; counter < wolrdServer.playerEntities.size(); ++counter)
+            {
+                EntityPlayer player = (EntityPlayer)wolrdServer.playerEntities.get(counter);
+                int playerX = MathHelper.floor_double(player.posX / 16.0D);
+                int playerY = MathHelper.floor_double(player.posZ / 16.0D);
+                byte chunkLength = 8;
+
+                for (int chunkX = -chunkLength; chunkX <= chunkLength; ++chunkX)
                 {
-                    for (int var10 = -var8; var10 <= var8; ++var10)
+                    for (int chunkY = -chunkLength; chunkY <= chunkLength; ++chunkY)
                     {
-                        boolean var11 = var9 == -var8 || var9 == var8 || var10 == -var8 || var10 == var8;
-                        ChunkCoordIntPair var12 = new ChunkCoordIntPair(var9 + var7, var10 + var5);
-
-                        if (!var11)
+                        boolean edge = chunkX == -chunkLength || chunkX == chunkLength || chunkY == -chunkLength || chunkY == chunkLength;
+                        ChunkCoordIntPair chunkCoord = new ChunkCoordIntPair(chunkX + playerX, chunkY + playerY);
+
+                        if (!edge)
                         {
-                            eligibleChunksForSpawning.put(var12, Boolean.valueOf(false));
+                            eligibleChunksForSpawning.put(chunkCoord, Boolean.valueOf(false));
                         }
-                        else if (!eligibleChunksForSpawning.containsKey(var12))
+                        else if (!eligibleChunksForSpawning.containsKey(chunkCoord))
                         {
-                            eligibleChunksForSpawning.put(var12, Boolean.valueOf(true));
+                            eligibleChunksForSpawning.put(chunkCoord, Boolean.valueOf(true));
                         }
                     }
                 }
             }
 
-            var4 = 0;
-            ChunkCoordinates var34 = par0WorldServer.getSpawnPoint();
-            EnumCreatureType[] var35 = EnumCreatureType.values();
-            var5 = var35.length;
-
-            for (int var36 = 0; var36 < var5; ++var36)
-            {
-                EnumCreatureType var37 = var35[var36];
-
-                if ((!var37.getPeacefulCreature() || par2) && (var37.getPeacefulCreature() || par1) && (!var37.getAnimal() || par3) && par0WorldServer.countEntities(var37.getCreatureClass()) <= var37.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256)
+			spawnChunkloaderEntities(wolrdServer,eligibleChunksForSpawning);
+
+            counter = 0;
+            ChunkCoordinates spawnPoint = wolrdServer.getSpawnPoint();
+            EnumCreatureType[] creatureTypes = EnumCreatureType.values();
+            int creatureLength = creatureTypes.length;
+
+            for (int creatureTypeIndex = 0; creatureTypeIndex < creatureLength; ++creatureTypeIndex)
+            {
+                EnumCreatureType creatureType = creatureTypes[creatureTypeIndex];
+
+                if ((!creatureType.getPeacefulCreature() || spawnPeacefulMobs) && (creatureType.getPeacefulCreature() || spawnHostileMobs) && (!creatureType.getAnimal() || spawnAnimals) && wolrdServer.countEntities(creatureType.getCreatureClass()) <= creatureType.getMaxNumberOfCreature() * eligibleChunksForSpawning.size() / 256)
                 {
-                    Iterator var39 = eligibleChunksForSpawning.keySet().iterator();
+                    Iterator chunkIterator = eligibleChunksForSpawning.keySet().iterator();
                     label104:
 
-                    while (var39.hasNext())
+                    while (chunkIterator.hasNext())
                     {
-                        ChunkCoordIntPair var38 = (ChunkCoordIntPair)var39.next();
-
-                        if (!((Boolean)eligibleChunksForSpawning.get(var38)).booleanValue())
+                        ChunkCoordIntPair chunkCoord = (ChunkCoordIntPair)chunkIterator.next();
+
+                        if (!((Boolean)eligibleChunksForSpawning.get(chunkCoord)).booleanValue())
                         {
-                            ChunkPosition var40 = getRandomSpawningPointInChunk(par0WorldServer, var38.chunkXPos, var38.chunkZPos);
-                            int var13 = var40.x;
-                            int var14 = var40.y;
-                            int var15 = var40.z;
-
-                            if (!par0WorldServer.isBlockNormalCube(var13, var14, var15) && par0WorldServer.getBlockMaterial(var13, var14, var15) == var37.getCreatureMaterial())
+                        	
+                        	  
+                        	  
+                            ChunkPosition randomPosition = getRandomSpawningPointInChunk(wolrdServer, chunkCoord.chunkXPos, chunkCoord.chunkZPos);
+                            int randomPositionX = randomPosition.x;
+                            int randomPositionY = randomPosition.y;
+                            int randomPositionZ = randomPosition.z;
+
+                            if (!wolrdServer.isBlockNormalCube(randomPositionX, randomPositionY, randomPositionZ) && wolrdServer.getBlockMaterial(randomPositionX, randomPositionY, randomPositionZ) == creatureType.getCreatureMaterial())
                             {
                                 int var16 = 0;
                                 int var17 = 0;
 
+                              
+                                
                                 while (var17 < 3)
                                 {
-                                    int var18 = var13;
-                                    int var19 = var14;
-                                    int var20 = var15;
+                                    int var18 = randomPositionX;
+                                    int var19 = randomPositionY;
+                                    int var20 = randomPositionZ;
                                     byte var21 = 6;
                                     SpawnListEntry var22 = null;
                                     int var23 = 0;
@@ -112,28 +121,28 @@
                                         {
                                             label97:
                                             {
-                                                var18 += par0WorldServer.rand.nextInt(var21) - par0WorldServer.rand.nextInt(var21);
-                                                var19 += par0WorldServer.rand.nextInt(1) - par0WorldServer.rand.nextInt(1);
-                                                var20 += par0WorldServer.rand.nextInt(var21) - par0WorldServer.rand.nextInt(var21);
-
-                                                if (canCreatureTypeSpawnAtLocation(var37, par0WorldServer, var18, var19, var20))
+                                                var18 += wolrdServer.rand.nextInt(var21) - wolrdServer.rand.nextInt(var21);
+                                                var19 += wolrdServer.rand.nextInt(1) - wolrdServer.rand.nextInt(1);
+                                                var20 += wolrdServer.rand.nextInt(var21) - wolrdServer.rand.nextInt(var21);
+
+                                                if (canCreatureTypeSpawnAtLocation(creatureType, wolrdServer, var18, var19, var20))
                                                 {
                                                     float var24 = (float)var18 + 0.5F;
                                                     float var25 = (float)var19;
                                                     float var26 = (float)var20 + 0.5F;
 
-                                                    if (par0WorldServer.getClosestPlayer((double)var24, (double)var25, (double)var26, 24.0D) == null)
+                                                    if (wolrdServer.getClosestPlayer((double)var24, (double)var25, (double)var26, 24.0D) == null)
                                                     {
-                                                        float var27 = var24 - (float)var34.posX;
-                                                        float var28 = var25 - (float)var34.posY;
-                                                        float var29 = var26 - (float)var34.posZ;
+                                                        float var27 = var24 - (float)spawnPoint.posX;
+                                                        float var28 = var25 - (float)spawnPoint.posY;
+                                                        float var29 = var26 - (float)spawnPoint.posZ;
                                                         float var30 = var27 * var27 + var28 * var28 + var29 * var29;
 
                                                         if (var30 >= 576.0F)
                                                         {
                                                             if (var22 == null)
                                                             {
-                                                                var22 = par0WorldServer.spawnRandomCreature(var37, var18, var19, var20);
+                                                                var22 = wolrdServer.spawnRandomCreature(creatureType, var18, var19, var20);
 
                                                                 if (var22 == null)
                                                                 {
@@ -145,29 +154,31 @@
 
                                                             try
                                                             {
-                                                                var31 = (EntityLiving)var22.entityClass.getConstructor(new Class[] {World.class}).newInstance(new Object[] {par0WorldServer});
+                                                                var31 = (EntityLiving)var22.entityClass.getConstructor(new Class[] {World.class}).newInstance(new Object[] {wolrdServer});
                                                             }
                                                             catch (Exception var33)
                                                             {
                                                                 var33.printStackTrace();
-                                                                return var4;
+                                                                return counter;
                                                             }
 
-                                                            var31.setLocationAndAngles((double)var24, (double)var25, (double)var26, par0WorldServer.rand.nextFloat() * 360.0F, 0.0F);
-
+                                                            var31.setLocationAndAngles((double)var24, (double)var25, (double)var26, wolrdServer.rand.nextFloat() * 360.0F, 0.0F);
+
+                                                     
                                                             if (var31.getCanSpawnHere())
                                                             {
                                                                 ++var16;
-                                                                par0WorldServer.spawnEntityInWorld(var31);
-                                                                creatureSpecificInit(var31, par0WorldServer, var24, var25, var26);
-
+                                                                wolrdServer.spawnEntityInWorld(var31);
+                                                                creatureSpecificInit(var31, wolrdServer, var24, var25, var26);
+                                                           
+                                                                
                                                                 if (var16 >= var31.getMaxSpawnedInChunk())
                                                                 {
                                                                     continue label104;
                                                                 }
                                                             }
 
-                                                            var4 += var16;
+                                                            counter += var16;
                                                         }
                                                     }
                                                 }
@@ -187,9 +198,133 @@
                 }
             }
 
-            return var4;
-        }
-    }
+            return counter;
+        }
+    }
+    
+    private static int spawnChunkloaderEntities(WorldServer wolrdServer, HashMap<ChunkCoordIntPair, Boolean> playerChunks) {
+		int counter = 0;
+
+		HashSet<ChunkCoordIntPair> chunks = EventRegistry.spawnableChunksForDimension(wolrdServer.provider.dimensionId);
+
+
+		ChunkCoordinates spawnPoint = wolrdServer.getSpawnPoint();
+		EnumCreatureType[] creatureTypes = EnumCreatureType.values();
+		int creatureLength = creatureTypes.length;
+
+		for (int creatureTypeIndex = 0; creatureTypeIndex < creatureLength; ++creatureTypeIndex)
+		{
+			EnumCreatureType creatureType = creatureTypes[creatureTypeIndex];
+
+			if (!creatureType.getAnimal() && wolrdServer.countEntitiesFromChunkLoader(creatureType.getCreatureClass()) <= (creatureType.getMaxNumberOfCreature() / 4.0) * chunks.size() / 9.0)
+			{
+				Iterator chunkIterator = chunks.iterator();
+				labelWhile:
+
+					while (chunkIterator.hasNext())
+					{
+
+						ChunkCoordIntPair chunkCoord = (ChunkCoordIntPair)chunkIterator.next();
+						ChunkPosition randomChunkPos = getRandomSpawningPointInChunk(wolrdServer, chunkCoord.chunkXPos, chunkCoord.chunkZPos);
+						int randomChunkPosX = randomChunkPos.x;
+						int randomChunkPosY = randomChunkPos.y;
+						int randomChunkPosZ = randomChunkPos.z;
+
+						if (!wolrdServer.isBlockNormalCube(randomChunkPosX, randomChunkPosY, randomChunkPosZ) && wolrdServer.getBlockMaterial(randomChunkPosX, randomChunkPosY, randomChunkPosZ) == creatureType.getCreatureMaterial())
+						{
+							int counterSpawn = 0;
+							int counterSpawn2 = 0;
+
+
+							while (counterSpawn2 < 3)
+							{
+								int randomPosX = randomChunkPosX;
+								int randomPosY = randomChunkPosY;
+								int randomPosZ = randomChunkPosZ;
+								byte positionVariance = 6;
+								SpawnListEntry spawnEntry = null;
+								int counterGroup = 0;
+
+								while (true)
+								{
+									if (counterGroup < 4)
+									{
+										groupLabel:
+										{
+										randomPosX += wolrdServer.rand.nextInt(positionVariance) - wolrdServer.rand.nextInt(positionVariance);
+										randomPosY += wolrdServer.rand.nextInt(1) - wolrdServer.rand.nextInt(1);
+										randomPosZ += wolrdServer.rand.nextInt(positionVariance) - wolrdServer.rand.nextInt(positionVariance);
+
+
+
+										if (canCreatureTypeSpawnAtLocation(creatureType, wolrdServer, randomPosX, randomPosY, randomPosZ))
+										{
+											float posX = (float)randomPosX + 0.5F;
+											float posY = (float)randomPosY;
+											float posZ = (float)randomPosZ + 0.5F;
+											
+											if (wolrdServer.getClosestPlayer((double)posX, (double)posY, (double)posZ, 24.0D) == null)
+											{
+												
+
+
+												if (spawnEntry == null)
+												{
+													spawnEntry = wolrdServer.spawnRandomCreature(creatureType, randomPosX, randomPosY, randomPosZ);
+
+													if (spawnEntry == null)
+													{
+														break groupLabel;
+													}
+												}
+
+												EntityLiving entity;
+
+												try
+												{
+													entity = (EntityLiving)spawnEntry.entityClass.getConstructor(new Class[] {World.class}).newInstance(new Object[] {wolrdServer});
+												}
+												catch (Exception var33)
+												{
+													var33.printStackTrace();
+													return counter;
+												}
+
+												entity.setLocationAndAngles((double)posX, (double)posY, (double)posZ, wolrdServer.rand.nextFloat() * 360.0F, 0.0F);
+
+												if (entity.getCanSpawnHere() &&  wolrdServer.getBlockLightValue(randomPosX, randomPosY, randomPosZ) < 4)
+												{
+													++counterSpawn;
+													wolrdServer.spawnEntityInWorld(entity);
+													entity.setFromChunkLoader(true);
+													creatureSpecificInit(entity, wolrdServer, posX, posY, posZ);
+
+													if (counterSpawn >= entity.getMaxSpawnedInChunk())
+													{
+														continue labelWhile;
+													}
+												}
+
+												counter += counterSpawn;
+
+											}
+										}
+
+										++counterGroup;
+										continue;
+										}
+									}
+
+									++counterSpawn2;
+									break;
+								}
+							}
+						}
+					}
+			}
+		}
+		return counter;
+	}
 
     /**
      * Returns whether or not the specified creature type can spawn at the specified location.
