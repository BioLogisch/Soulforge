--- ../src_base/minecraft/net/minecraft/src/CreativeTabs.java
+++ ../src/minecraft/net/minecraft/src/CreativeTabs.java
@@ -4,7 +4,7 @@
 
 public class CreativeTabs
 {
-    public static final CreativeTabs[] creativeTabArray = new CreativeTabs[12];
+    public static CreativeTabs[] creativeTabArray = new CreativeTabs[12];
     public static final CreativeTabs tabBlock = new CreativeTabBlock(0, "buildingBlocks");
     public static final CreativeTabs tabDecorations = new CreativeTabDeco(1, "decorations");
     public static final CreativeTabs tabRedstone = new CreativeTabRedstone(2, "redstone");
@@ -27,8 +27,22 @@
     /** Whether to draw the title in the foreground of the creative GUI */
     private boolean drawTitle = true;
 
+    public CreativeTabs(String label)
+    {
+        this(getNextID(), label);
+    }
+
     public CreativeTabs(int par1, String par2Str)
     {
+        if (par1 >= creativeTabArray.length)
+        {
+            CreativeTabs[] tmp = new CreativeTabs[par1 + 1];
+            for (int x = 0; x < creativeTabArray.length; x++)
+            {
+                tmp[x] = creativeTabArray[x];
+            }
+            creativeTabArray = tmp;
+        }
         this.tabIndex = par1;
         this.tabLabel = par2Str;
         creativeTabArray[par1] = this;
@@ -39,43 +53,43 @@
         return this.tabIndex;
     }
 
-    public String getTabLabel()
-    {
-        return this.tabLabel;
-    }
-
-    /**
-     * Gets the translated Label.
-     */
-    public String getTranslatedTabLabel()
-    {
-        return StringTranslate.getInstance().translateKey("itemGroup." + this.getTabLabel());
-    }
-
-    public Item getTabIconItem()
-    {
-        return Item.itemsList[this.getTabIconItemIndex()];
-    }
-
-    /**
-     * the itemID for the item to be displayed on the tab
-     */
-    public int getTabIconItemIndex()
-    {
-        return 1;
-    }
-
-    public String getBackgroundImageName()
-    {
-        return this.backgroundImageName;
-    }
-
     public CreativeTabs setBackgroundImageName(String par1Str)
     {
         this.backgroundImageName = par1Str;
         return this;
     }
 
+    public String getTabLabel()
+    {
+        return this.tabLabel;
+    }
+
+    /**
+     * Gets the translated Label.
+     */
+    public String getTranslatedTabLabel()
+    {
+        return StringTranslate.getInstance().translateKey("itemGroup." + this.getTabLabel());
+    }
+
+    public Item getTabIconItem()
+    {
+        return Item.itemsList[this.getTabIconItemIndex()];
+    }
+
+    /**
+     * the itemID for the item to be displayed on the tab
+     */
+    public int getTabIconItemIndex()
+    {
+        return 1;
+    }
+
+    public String getBackgroundImageName()
+    {
+        return this.backgroundImageName;
+    }
+
     public boolean drawInForegroundOfTab()
     {
         return this.drawTitle;
@@ -103,6 +117,10 @@
      */
     public int getTabColumn()
     {
+        if (tabIndex > 11)
+        {
+            return ((tabIndex - 12) % 10) % 5;
+        }
         return this.tabIndex % 6;
     }
 
@@ -111,27 +129,87 @@
      */
     public boolean isTabInFirstRow()
     {
+        if (tabIndex > 11)
+        {
+            return ((tabIndex - 12) % 10) < 5;
+        }
         return this.tabIndex < 6;
     }
-
     /**
      * only shows items which have tabToDisplayOn == this
      */
     public void displayAllReleventItems(List par1List)
     {
-        Item[] var2 = Item.itemsList;
-        int var3 = var2.length;
-
-        for (int var4 = 0; var4 < var3; ++var4)
-        {
-            Item var5 = var2[var4];
-
-            if (var5 != null && var5.getCreativeTab() == this)
-            {
-                var5.getSubItems(var5.itemID, this, par1List);
-            }
-        }
-    }
-
-    public void func_92116_a(List par1List, EnumEnchantmentType ... par2ArrayOfEnumEnchantmentType) {}
+        Item[] aitem = Item.itemsList;
+        int i = aitem.length;
+
+        for (int j = 0; j < i; ++j)
+        {
+            Item item = aitem[j];
+
+            if (item == null)
+            {
+                continue;
+            }
+
+            for(CreativeTabs tab : item.getCreativeTabs())
+            {
+                if (tab == this)
+                {
+                    item.getSubItems(item.itemID, this, par1List);
+                }
+            }
+        }
+    }
+
+    public int getTabPage()
+    {
+        if (tabIndex > 11)
+        {
+            return ((tabIndex - 12) / 10) + 1;
+        }
+        return 0;
+    }
+
+    public static int getNextID()
+    {
+        return creativeTabArray.length;
+    }
+
+    /**
+     * Get the ItemStack that will be rendered to the tab.
+     */
+    public ItemStack getIconItemStack()
+    {
+        return new ItemStack(getTabIconItem());
+    }
+
+    public void func_92116_a(List par1List, EnumEnchantmentType ... par2ArrayOfEnumEnchantmentType)
+    {
+        Enchantment[] aenchantment = Enchantment.enchantmentsList;
+        int i = aenchantment.length;
+
+        for (int j = 0; j < i; ++j)
+        {
+            Enchantment enchantment = aenchantment[j];
+
+            if (enchantment != null && enchantment.type != null)
+            {
+                boolean flag = false;
+
+                for (int k = 0; k < par2ArrayOfEnumEnchantmentType.length && !flag; ++k)
+                {
+                    if (enchantment.type == par2ArrayOfEnumEnchantmentType[k])
+                    {
+                        flag = true;
+                    }
+                }
+
+                if (flag)
+                {
+                    par1List.add(Item.enchantedBook.func_92111_a(new EnchantmentData(enchantment, enchantment.getMaxLevel())));
+                }
+            }
+        }
+    }
 }
