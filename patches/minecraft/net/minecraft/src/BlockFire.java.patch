--- ../src_base/minecraft/net/minecraft/src/BlockFire.java
+++ ../src/minecraft/net/minecraft/src/BlockFire.java
@@ -5,13 +5,13 @@
 public class BlockFire extends Block
 {
     /** The chance this block will encourage nearby blocks to catch on fire */
-    public static int[] chanceToEncourageFire = new int[256];
+    public static int[] chanceToEncourageFire = new int[4096];
 
     /**
      * This is an array indexed by block ID the larger the number in the array the more likely a block type will catch
      * fires
      */
-    public static int[] abilityToCatchFire = new int[256];
+    public static int[] abilityToCatchFire = new int[4096];
     private Icon[] iconArray;
 
     protected BlockFire(int par1)
@@ -26,6 +26,7 @@
      */
     public void initializeBlock()
     {
+       
         this.setBurnRate(Block.planks.blockID, 5, 20);
         this.setBurnRate(Block.woodDoubleSlab.blockID, 5, 20);
         this.setBurnRate(Block.woodSingleSlab.blockID, 5, 20);
@@ -41,6 +42,7 @@
         this.setBurnRate(Block.tallGrass.blockID, 60, 100);
         this.setBurnRate(Block.cloth.blockID, 30, 60);
         this.setBurnRate(Block.vine.blockID, 15, 100);
+        
     }
 
     /**
@@ -48,10 +50,11 @@
      * chanceToEncourageFire the faster it will burn and spread to other blocks. Args: blockID, chanceToEncourageFire,
      * abilityToCatchFire
      */
-    private void setBurnRate(int par1, int par2, int par3)
+    public static void setBurnRate(int par1, int par2, int par3)
     {
         chanceToEncourageFire[par1] = par2;
         abilityToCatchFire[par1] = par3;
+        Block.blocksList[par1].setBurnProperties(par1, par3, par2);
     }
 
     /**
@@ -220,29 +223,34 @@
 
     private void tryToCatchBlockOnFire(World par1World, int par2, int par3, int par4, int par5, Random par6Random, int par7)
     {
-        int var8 = abilityToCatchFire[par1World.getBlockId(par2, par3, par4)];
-
-        if (par6Random.nextInt(par5) < var8)
-        {
-            boolean var9 = par1World.getBlockId(par2, par3, par4) == Block.tnt.blockID;
+        int j1 = 0;
+        Block block = Block.blocksList[par1World.getBlockId(par2, par3, par4)];
+        if (block != null)
+        {
+            j1 = block.getFlammability(par1World, par2, par3, par4, par1World.getBlockMetadata(par2, par3, par4));
+        }
+
+        if (par6Random.nextInt(par5) < j1)
+        {
+            boolean flag = par1World.getBlockId(par2, par3, par4) == Block.tnt.blockID;
 
             if (par6Random.nextInt(par7 + 10) < 5 && !par1World.canLightningStrikeAt(par2, par3, par4))
             {
-                int var10 = par7 + par6Random.nextInt(5) / 4;
-
-                if (var10 > 15)
-                {
-                    var10 = 15;
-                }
-
-                par1World.setBlock(par2, par3, par4, this.blockID, var10, 3);
+                int k1 = par7 + par6Random.nextInt(5) / 4;
+
+                if (k1 > 15)
+                {
+                    k1 = 15;
+                }
+
+                par1World.setBlock(par2, par3, par4, this.blockID, k1, 3);
             }
             else
             {
                 par1World.setBlockToAir(par2, par3, par4);
             }
 
-            if (var9)
+            if (flag)
             {
                 Block.tnt.onBlockDestroyedByPlayer(par1World, par2, par3, par4, 1);
             }
@@ -291,20 +299,36 @@
     /**
      * Checks the specified block coordinate to see if it can catch fire.  Args: blockAccess, x, y, z
      */
-    public boolean canBlockCatchFire(IBlockAccess par1IBlockAccess, int par2, int par3, int par4)
-    {
-        return chanceToEncourageFire[par1IBlockAccess.getBlockId(par2, par3, par4)] > 0;
-    }
-
-    /**
-     * Retrieves a specified block's chance to encourage their neighbors to burn and if the number is greater than the
-     * current number passed in it will return its number instead of the passed in one.  Args: world, x, y, z,
-     * curChanceToEncourageFire
-     */
-    public int getChanceToEncourageFire(World par1World, int par2, int par3, int par4, int par5)
-    {
-        int var6 = chanceToEncourageFire[par1World.getBlockId(par2, par3, par4)];
-        return var6 > par5 ? var6 : par5;
+    public boolean canBlockCatchFire(IBlockAccess world, int x, int y, int z)
+    {
+        Block block = Block.blocksList[world.getBlockId(x, y, z)];
+        if (block != null)
+        {
+            return block.isFlammable(world, x, y, z, world.getBlockMetadata(x, y, z));//chanceToEncourageFire[block.blockID] > 0;//
+        }
+        return false;
+    }
+
+    /**
+     * Side sensitive version that calls the block function.
+     * 
+     * @param world The current world
+     * @param x X Position
+     * @param y Y Position
+     * @param z Z Position
+     * @param oldChance The previous maximum chance.
+     * @param face The side the fire is coming from
+     * @return The chance of the block catching fire, or oldChance if it is higher
+     */
+    public int getChanceToEncourageFire(World world, int x, int y, int z, int oldChance)
+    {
+        int newChance = 0;
+        Block block = Block.blocksList[world.getBlockId(x, y, z)];
+        if (block != null)
+        {
+            newChance =  block.getFireSpreadSpeed(world, x, y, z, world.getBlockMetadata(x, y, z));
+        }
+        return (newChance > oldChance ? newChance : oldChance);
     }
 
     /**
